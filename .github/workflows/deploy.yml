name: Deploy React App Infrastructure and Website

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  TF_VERSION: '1.5.7'
  AWS_REGION: 'us-east-1'

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform

    - name: Terraform Plan
      run: terraform plan -no-color
      working-directory: ./terraform

  terraform-apply:
    name: 'Terraform Apply & Deploy React App'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      run: npm ci

    - name: Build React app
      run: npm run build

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform

    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: ./terraform

    - name: Get Terraform Outputs
      id: tf-outputs
      run: |
        echo "s3_bucket_name=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
        echo "cloudfront_distribution_id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT
      working-directory: ./terraform

    - name: Deploy React build to S3
      run: |
        aws s3 sync ./build s3://${{ steps.tf-outputs.outputs.s3_bucket_name }} \
          --delete \
          --cache-control "max-age=31536000" \
          --exclude "*.html"
        aws s3 sync ./build s3://${{ steps.tf-outputs.outputs.s3_bucket_name }} \
          --exclude "*" \
          --include "*.html" \
          --cache-control "max-age=0,no-cache,no-store,must-revalidate"
    
    - name: Invalidate CloudFront
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ steps.tf-outputs.outputs.cloudfront_distribution_id }} \
          --paths "/*"

    - name: Display Website URL
      run: |
        echo "ðŸš€ React app deployed successfully!"
        echo "ðŸ“„ Website URL: https://zagran.dev"
        echo "ðŸ”„ CloudFront Distribution ID: ${{ steps.tf-outputs.outputs.cloudfront_distribution_id }}"
